summary: go extension test
environment:
  SCENARIO/bare: bare
  SCENARIO/base_2404: ubuntu-24.04
  ROCKCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS: "true"

execute: |
  NAME="go-${SCENARIO//./-}"
  ROCK_FILE="${NAME}_0.1_amd64.rock"
  IMAGE="${NAME}:0.1"

  run_rockcraft init --name "${NAME}" --profile go-framework
  sed -i "s/^base: .*/base: ${SCENARIO//-/@}/g" rockcraft.yaml
  if [ "${SCENARIO}" != "bare" ]; then
    sed -i "s/^build-base: .*/build-base: ${SCENARIO//-/@}/g" rockcraft.yaml
  fi
  sed -i "s/NAME/${NAME}/g" go.mod

  run_rockcraft pack

  test -f "${ROCK_FILE}"
  test ! -d work

  # Ensure docker does not have this container image
  docker rmi --force "${IMAGE}"
  # Install image
  sudo rockcraft.skopeo --insecure-policy copy "oci-archive:${ROCK_FILE}" \
    "docker-daemon:${IMAGE}"
  # Ensure image exists
  docker images "${IMAGE}" | MATCH "${NAME}"

  # ensure the app folder has the correct user
  docker run --rm --entrypoint /bin/bash "${IMAGE}" -c "find /app -exec ls -ld {} \;" | awk '$3 != "_daemon_" {print; exit 2}'
  if [ $? -eq 2 ]; then
    echo "Error: Some files/folders inside app are not owned by _daemon_"
    exit 2
  fi

  # ensure the loki log folder has the correct user
  docker run --rm --entrypoint /bin/bash "${IMAGE}" -c "find /opt/promtail -exec ls -ld {} \;" | awk '$3 != "_daemon_" {print; exit 2}'
  if [ $? -eq 2 ]; then
    echo "Error: Some files/folders inside /opt/promtail are not owned by _daemon_"
    exit 2
  fi
  docker run --rm --entrypoint /bin/bash "${IMAGE}" -c "find /etc/promtail -exec ls -ld {} \;" | awk '$3 != "_daemon_" {print; exit 2}'
  if [ $? -eq 2 ]; then
    echo "Error: Some files/folders inside /etc/promtail are not owned by _daemon_"
    exit 2
  fi

  # ensure container doesn't exist
  docker rm -f "${NAME}-container"

  # test the default go service
  docker run --name "${NAME}-container" -d -p 8137:8000 "${IMAGE}"
  retry -n 5 --wait 2 curl localhost:8137
  [ "$(curl -sSf localhost:8137)" == "ok" ]

restore: |
  NAME="go-${SCENARIO//./-}"
  sed -i "s/${NAME}/NAME/g" go.mod
  docker stop "${NAME}-container"
  docker rm "${NAME}-container"
  rm -f "*.rock" rockcraft.yaml
  docker system prune -a -f
